buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '4.1'
        // accounts
        accounts_release_version = '1.0'
        accounts_release_group = 'com.r3.corda.lib.accounts'
        confidential_id_release_group = "com.r3.corda.lib.ci"
        confidential_id_release_version = "1.0"

        //tokens
        tokens_release_group = 'com.r3.corda.lib.tokens'
        tokens_release_version = '1.0'


        corda_gradle_plugins_version = '4.0.42'
        junit_version = '4.12'
        quasar_version = '0.7.10'
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
        slf4j_version = '1.7.25'
        log4j_version = '2.11.2'
        corda_platform_version = '4'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }

        // accounts
        maven { url 'http://ci-artifactory.corda.r3cev.com/artifactory/corda-lib-dev' }
        maven { url 'http://ci-artifactory.corda.r3cev.com/artifactory/corda-lib' }
    }

    dependencies {
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

allprojects {
    apply plugin: 'java'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
        // Can be removed post-release - used to get nightly snapshot build.
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-lib' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-tokens-dev' }
        // Business Network Membership Service (BNMS)
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-solutions-releases' }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters" // Required by Corda's serialisation framework.
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}


apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

cordapp {
    info {
        name "shield"
        vendor "Securitize"
        targetPlatformVersion corda_platform_version.toInteger()
        minimumPlatformVersion corda_platform_version.toInteger()
    }
}

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    testCompile "junit:junit:$junit_version"

    // Corda dependencies.
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")
    cordapp project(":contracts")

    // For logging
    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"

    // Token SDK dependencies.
    cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-money:$tokens_release_version"

    // Business Network Membership Service (BNMS)
    cordapp "com.r3.businessnetworks:membership-service:2.0"
    cordapp "com.r3.businessnetworks:membership-service-contracts-and-states:2.0"

    // account
    cordapp "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"
    cordapp "$accounts_release_group:accounts-contracts:$accounts_release_version"
    cordapp "$accounts_release_group:accounts-workflows:$accounts_release_version"

    // Http Client -- tried with many different ones. But they are giving me signing errors when building jar
    compile 'com.squareup.okhttp3:okhttp:4.3.1'
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = true
        }
        cordapp("$tokens_release_group:tokens-contracts:$tokens_release_version")
        cordapp("$tokens_release_group:tokens-workflows:$tokens_release_version")
        cordapp("$tokens_release_group:tokens-money:$tokens_release_version")
        cordapp project(':contracts')

        cordapp (project(':workflows')){
            // BNO node
            config "bno=\"O=BNO,L=New York,C=US\""
        }
        cordapp("$confidential_id_release_group:ci-workflows:$confidential_id_release_version")
        cordapp("$accounts_release_group:accounts-contracts:$accounts_release_version")
        cordapp("$accounts_release_group:accounts-workflows:$accounts_release_version")
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10002
        p2pAddress "13.89.63.69:10002"
        rpcSettings {
            address("13.89.63.69:10003")
            adminAddress("13.89.63.69:10043")
        }
        cordapps = []
    }
    node {
        name "O=issuer,L=London,C=GB"
        p2pPort 10005
        p2pAddress "13.89.63.69:10005"
        rpcSettings {
            address("13.89.63.69:10006")
            adminAddress("13.89.63.69:10046")
        }
        cordapps = ["com.r3.businessnetworks:membership-service:2.0", "com.r3.businessnetworks:membership-service-contracts-and-states:2.0"]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        cordapp (project(':workflows')) {
            config project.file("./config/uat/config.conf")
        }
    }
    node {
        name "O=trader1,L=New York,C=US"
        p2pPort 10008
        p2pAddress "13.89.63.69:10008"
        rpcSettings {
            address("13.89.63.69:10009")
            adminAddress("13.89.63.69:10049")
        }
        cordapps = ["com.r3.businessnetworks:membership-service:2.0", "com.r3.businessnetworks:membership-service-contracts-and-states:2.0"]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=trader2,L=New York,C=US"
        p2pPort 10011
        p2pAddress "13.89.63.69:10011"
        rpcSettings {
            address("13.89.63.69:10012")
            adminAddress("13.89.63.69:10051")
        }
        cordapps = ["com.r3.businessnetworks:membership-service:2.0", "com.r3.businessnetworks:membership-service-contracts-and-states:2.0"]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    node {
        name "O=BNO,L=New York,C=US"
        p2pPort 10014
        p2pAddress "13.89.63.69:10014"
        rpcSettings {
            address("13.89.63.69:10015")
            adminAddress("13.89.63.69:10053")
        }
        cordapp ("com.r3.businessnetworks:membership-service:2.0"){
            config '''
// Name of the notary to use for BNO transactions such as membership approval
notaryName = "O=Notary,L=London,C=GB"
// Whitelist of accepted BNOs. Attempt to communicate to not whitelisted BNO would result into an exception
bnoWhitelist = ["O=BNO,L=New York,C=US"]'''
        }
        cordapp ("com.r3.businessnetworks:membership-service-contracts-and-states:2.0")
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=treasurer,L=New York,C=US"
        p2pPort 10017
        p2pAddress "23.99.231.7:10017"
        rpcSettings {
            address("23.99.231.7:10018")
            adminAddress("23.99.231.7:10055")
        }
        cordapps = ["com.r3.businessnetworks:membership-service:2.0", "com.r3.businessnetworks:membership-service-contracts-and-states:2.0"]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        cordapp (project(':workflows')) {
            config project.file("./config/uat/config.conf")
        }
    }
    node {
        name "O=custodian,L=New York,C=US"
        p2pPort 10020
        p2pAddress "23.99.231.7:10020"
        rpcSettings {
            address("23.99.231.7:10021")
            adminAddress("23.99.231.7:10057")
        }
        cordapps = ["com.r3.businessnetworks:membership-service:2.0", "com.r3.businessnetworks:membership-service-contracts-and-states:2.0"]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}
